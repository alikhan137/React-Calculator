{"version":3,"sources":["App.js","components/ResultView.jsx","components/Keyboard.jsx","reportWebVitals.js","index.js"],"names":["output","history","symbols","App","useState","displayValue","state","setState","updateState","toString","onClick","id","keyType","value","lastInput","slice","functionKey","operatorKey","numberKey","resetOutput","display","calculate","includes","eval","replace","Number","isInteger","toFixed","error","className","ResultView","colorStyle","color","style","keys","class","Keyboard","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33aa3cca.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport ResultView from './components/ResultView';\nimport Keyboard from './components/Keyboard';\n\nlet output = '';\nlet history = '';\nlet symbols = ['*', '-', '+', '/'];\n\nfunction App() {\n\tconst [state, setState] = useState({\n\t\thistory: '',\n\t\tdisplayValue: ''\n\t});\n\tconst updateState = () => {\n\t\tsetState({ history: history.toString(), displayValue: output.toString() });\n\t};\n\n\t// ONCLICK BUTTON CLICK\n\tconst onClick = (id, keyType, value) => {\n\t\t// CONVERT TO STRING\n\t\toutput = output.toString();\n\t\t// GET LAST INPUT VALUE\n\t\tlet lastInput = output.slice(-1);\n\n\t\tswitch (keyType) {\n\t\t\tcase 'function':\n\t\t\t\tfunctionKey(id, lastInput);\n\t\t\t\tbreak;\n\t\t\tcase 'operator':\n\t\t\t\toperatorKey(value, lastInput);\n\t\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\t\tnumberKey(value, lastInput);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t};\n\tconst functionKey = (id, lastInput) => {\n\t\tconst resetOutput = display => {\n\t\t\t// RESET VALUES\n\t\t\thistory = '';\n\t\t\toutput = '';\n\t\t\t// Update state if display == true\n\t\t\tdisplay && updateState();\n\t\t};\n\t\tconst calculate = lastInput => {\n\t\t\t// CHECK IF LAST INPUT IS NUMBER AND OUTPUT IS NOT EMPTY\n\t\t\tif (!symbols.includes(lastInput) && output) {\n\t\t\t\ttry {\n\t\t\t\t\thistory = output;\n\t\t\t\t\toutput = eval(output.replace(/%/g, '*0.01'));\n\t\t\t\t\toutput = Number.isInteger(output) ? output : output.toFixed(3);\n\t\t\t\t\tupdateState();\n\t\t\t\t\t// UPDATE HISTORY TO RESULT AND RESET OUTPUT\n\t\t\t\t\thistory = output;\n\t\t\t\t\toutput = '';\n\t\t\t\t} catch (error) {\n\t\t\t\t\toutput = 'Error';\n\t\t\t\t\tupdateState();\n\t\t\t\t\tresetOutput();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tswitch (id) {\n\t\t\tcase 'clear':\n\t\t\t\tresetOutput(true);\n\t\t\t\tbreak;\n\t\t\tcase 'clearBack':\n\t\t\t\toutput = output.slice(0, -1);\n\t\t\t\tupdateState();\n\t\t\t\tbreak;\n\t\t\tcase 'calc':\n\t\t\t\tcalculate(lastInput);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t};\n\tconst operatorKey = (value, lastInput) => {\n\t\t// PREVENT STARTING WITH AN OPERATOR\n\t\tif (output === '' && value !== '-') {\n\t\t\treturn;\n\t\t} else {\n\t\t\t// REPLACE OPERATOR SYMBOL IF LASTINPUT IS OPERATOR\n\t\t\tsymbols.includes(lastInput)\n\t\t\t\t? (output = output.slice(0, -1) + value)\n\t\t\t\t: (output += value);\n\t\t}\n\t\tupdateState();\n\t};\n\tconst numberKey = (value, lastInput) => {\n\t\t// PREVENT ENTERING . OR % MULTIPY TIMES\n\t\tif (value === '.' || value === '%') {\n\t\t\t// PREVENT STARTING WITH '%'\n\t\t\tif (output === '' && value === '%') return;\n\t\t\tlastInput === '.' || lastInput === '%' || (output += value);\n\t\t} else {\n\t\t\toutput += value;\n\t\t}\n\t\tupdateState();\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<ResultView history={state.history} output={state.displayValue} />\n\t\t\t\t<Keyboard onClick={onClick} />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ResultView({ history, output }) {\r\n\t// CHANGE COLOR TO RED IF ERROR OCCURRED\r\n\tlet colorStyle = {\r\n\t\tcolor: output === 'Error' ? '#f11' : '#fff'\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={colorStyle} className=\"result\">\r\n\t\t\t<div className=\"history\">{history}</div>\r\n\t\t\t<div className=\"output\">{output}</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nResultView.propTypes = {\r\n\thistory: PropTypes.string,\r\n\toutput: PropTypes.string\r\n};\r\n\r\nexport default ResultView;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst keys = [\r\n\t{ id: 'clear', class: 'function', value: 'C' },\r\n\t{ id: 'clearBack', class: 'function', value: 'CE' },\r\n\t{ id: 'multiply', class: 'operator', value: '*' },\r\n\t{ id: '9', class: 'number', value: '9' },\r\n\t{ id: '8', class: 'number', value: '8' },\r\n\t{ id: '7', class: 'number', value: '7' },\r\n\t{ id: 'minus', class: 'operator', value: '-' },\r\n\t{ id: '6', class: 'number', value: '6' },\r\n\t{ id: '5', class: 'number', value: '5' },\r\n\t{ id: '4', class: 'number', value: '4' },\r\n\t{ id: 'add', class: 'operator', value: '+' },\r\n\t{ id: '3', class: 'number', value: '3' },\r\n\t{ id: '2', class: 'number', value: '2' },\r\n\t{ id: '1', class: 'number', value: '1' },\r\n\t{ id: 'divide', class: 'operator', value: '/' },\r\n\t{ id: 'dot', class: 'number', value: '.' },\r\n\t{ id: '0', class: 'number', value: '0' },\r\n\t{ id: '%', class: 'number', value: '%' },\r\n\t{ id: 'calc', class: 'function', value: '=' }\r\n];\r\n\r\nfunction Keyboard({ onClick }) {\r\n\treturn (\r\n\t\t<div className=\"keyboard\">\r\n\t\t\t{keys.map(key => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"btn\"\r\n\t\t\t\t\tid={key.id}\r\n\t\t\t\t\tkey={key.id}\r\n\t\t\t\t\tonClick={() => onClick(key.id, key.class, key.value)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{key.value}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nKeyboard.propTypes = {\r\n\tonClick: PropTypes.func\r\n};\r\n\r\nexport default Keyboard;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}